#!/usr/bin/env python3
"""
This code generates a bacteriophage identification profile for each sample.
"""
## useful imports
import time
import io
import os
import re
import sys
from sys import argv
from io import open
from termcolor import colored
from Bio import SeqIO
from functools import reduce
from termcolor import colored
import argparse
import pandas

## import my modules
from BacterialTyper import functions
from BacterialTyper import config

## import phispy modules
import PhiSpyModules
import pkg_resources
#from PhiSpy_tools import genbank_to_seed
# Contribution: https://github.com/linsalrob/PhiSpy/PhiSpyModules/writers.py

def results_PhiSpy(folder, name):
	"""Parse results generated by PhiSpy
	
	:param folder: Absolute path to output directory containing PhiSpy results.
	:param name: Sample name id
	
	:type folder: string
	:type name: string
	
	"""
	## prophage_coordiantes.csv_
	## "#prophage_ID", "Contig","Start","End","attL_Start","attL_End","attR_Start","attR_End","attL_Seq","attR_Seq","Longest_Repeat_flanking_phage" 

	## prophage.gff3
	# Contribution: https://github.com/linsalrob/PhiSpy/PhiSpyModules/writers.py
	
	return ()

######
def ident_bacteriophage(gbk_file, name, output_dir, training_set_tmp, Debug=False, min_contig_size=5000, window_size=30, nonprophage_genegaps=10, number_phage_genes=5,randomforest_trees=500, expand_slope=False, kmers_type="all", keep=False):

	"""Identify putative bacteriophages inserted.
	
	Function to call PhiSpy_ functions to generate the identification and annotation of bacteriophages inserted in bacterial genomes.
	
	:param gbk_file: GenBank format file
	:param name: Sample name id
	:param output_dir: Absolute path to output directory
	:param training_set_tmp:
	:param Debug: True/False for debugging messages
	:param min_contig_size: Minimum contig size (in bp) to be included in the analysis. Smaller contigs will be dropped.
	:param window_size: Window size of consecutive genes to look through to find phages.
	:param nonprophage_genegaps: The number of non phage genes betweeen prophages.
	:param number_phage_genes: Number of consecutive genes in a region of window size that must be prophage genes to be called.
	:param randomforest_trees: Number of trees generated by Random Forest classifier.
	:param expland_slope: Use the product of the slope of the Shannon scores in making test sets
	:param kmers_type: Type of kmers used for calculating Shannon scores. [all, codon, simple]
	:param keep: Do not delete temporary files

	:type gbk_file: string
	:type name: string
	:type output_dir: string
	:type training_set_tmp:
	:type Debug: Boolean 
	:type min_contig_size: integer
	:type window_size: integer
	:type nonprophage_genegaps: integer
	:type number_phage_genes: integer 
	:type randomforest_trees: integer
	:type expland_slope: Boolean
	:type kmers_type: string
	:type keep: Boolean


	.. attention:: Be aware of Copyright
	
		The code implemented here is very similary to the main function under PhiSpy.py main script: https://github.com/linsalrob/PhiSpy/blob/master/PhiSpy.py
		
		We basically implemented it here again to modulate and control accordingly to our project and needs. Give credit to the authors accordingly.
		
		Copyrigth: 2008-2018 Sajia Akhter, Katelyn McNair, Rob Edwards, 
		
		San Diego State University, San Diego, CA

		
	.. note:: This functions relies on several PhiSpy functions such as:
	
		- :func:`PhiSpy.PhiSpyModules.SeqioFilter`
		
		- :func:`PhiSpy.PhiSpyModules.make_test_set`
		
		- :func:`PhiSpy.PhiSpyModules.call_randomforest`
		
		- :func:`PhiSpy.PhiSpyModules.make_initial_tbl`
		
		- :func:`PhiSpy.PhiSpyModules.consider_unknown`
		
		- :func:`PhiSpy.PhiSpyModules.fixing_start_end`		
			
	"""

	## filename stamp of the process
	filename_stamp = output_dir + '/.PhiSpy'

	# check if previously done
	if os.path.isfile(filename_stamp):
		stamp =	functions.read_time_stamp(filename_stamp)
		print (colored("\tA previous command generated results on: %s [%s]" %(stamp, name), 'yellow'))
	else:	
		## debug message
		if (Debug):
			print (colored("**DEBUG: Call PhiSpy for sample %s " %gbk_file + "**", 'yellow'))

			print('+ Generate PhiSpy call for file %s...' %gbk_file)

		### create folder
		functions.create_folder(output_dir)
		
		## Filter to remove short contigs
		gbk_filtered = PhiSpyModules.SeqioFilter(filter(lambda x: len(x.seq) > min_contig_size, SeqIO.parse(gbk_file, "genbank")))
		ncontigs = reduce(lambda sum, element: sum + 1, gbk_filtered, 0)
		if ncontigs == 0:
			## debug message
			if (Debug):
				print (colored("**DEBUG: 100% contigs in %i are less than %i bp" %(gbk_file, min_contig_size)), 'yellow')
			
			return(0)

		training_set = "data/" + training_set_tmp

		## create argparse with arguments provided to call PhiSpy
		arg_parser = argparse.Namespace(infile=gbk_file, output_dir=output_dir,
								training_set = training_set, min_contig_size = min_contig_size,
								window_size= window_size, nonprophage_genegaps=nonprophage_genegaps,
								number=number_phage_genes, randomforest_trees=randomforest_trees, quiet=True,
								expand_slope=expand_slope, kmers_type=kmers_type, keep=keep, record=gbk_filtered)
		## debug message
		if (Debug):
			print (colored("**DEBUG: Arguments for PhiSpy", 'yellow'))
			print (vars(arg_parser))	
		
		# make testing set: calculate Shanon slope
		my_make_test_flag = PhiSpyModules.make_test_set(**vars(arg_parser))
	
		## Classification
		PhiSpyModules.call_randomforest(**vars(arg_parser))
		PhiSpyModules.make_initial_tbl(**vars(arg_parser))

		## Consider unknonw functions
		if (training_set == 'data/trainSet_genericAll.txt'):
			PhiSpyModules.consider_unknown(arg_parser.output_dir)

		## PhiSpy Evaluation
		PhiSpyModules.fixing_start_end(**vars(arg_parser))
		
		## when finished print time stamp in  output_dir + '/.PhiSpy'
		stamp =	functions.print_time_stamp(filename_stamp)

	## final results
	return (output_dir) ## contains results
######

def print_list_modified():
	"""Print PhiSpy training set information
	
	This function is a modification for better clarification to users of the different training sets available within PhiSpy python package.
	
	It retrieves the data from the file :file:`data/trainingGenome_list.txt` provided within the package PhiSpy. 
	
	It uses :func:`BacterialTyper.bacteriophage.get_list_PhiSpy_trainingSets` and then manipulate the dataframe for better understanding. 	

	"""
	
	data = get_list_PhiSpy_trainingSets()	
	print(data)



######
def get_list_PhiSpy_trainingSets():
	"""Get training Sets for PhiSpy calculations
	
	Using pkg_resources filename we retrieved the PhiSpy file :file:`data/trainingGenome_list.txt` that contains all the available training sets pre-calculated for different bacterial species/strains.
	
	:returns: Pandas dataframe containing the file information
	
	"""
	## read into pandas dataframe the trainingGenome list dataset
	data = pandas.read_csv(pkg_resources.resource_filename('PhiSpyModules', "data/trainingGenome_list.txt"), 
						sep='\t', header=None, names=["index", "Set_name", "Species", "Number_genomes"])
	
	return (data)
	
######

######
def help_PhiSpy():
	"""Print additional information for PhiSpy
	
	PhiSpy_ is a program for identifying prophages from among microbial genome sequences. 
	
	Copyright: 2008-2018 
	
	Sajia Akhter, Katelyn McNair, Rob Edwards, San Diego State University, San Diego, CA
	
	This function also print the list of training sets available and provided within PhySpy.
	
	.. note:: This function depends on the PhiSpy function:
	
		- :func:`PhiSpy.PhiSpyModules.print_list`
	
	.. include:: ../../links.inc	 	
	"""
	print ("\n** PhiSpy additional information **")
	print ("PhiSpy is a program for identifying prophages from among microbial genome sequences\n")
	print ("(c) 2008-2018 Sajia Akhter, Katelyn McNair, Rob Edwards, San Diego State University, San Diego, CA")
	print ("https://github.com/linsalrob/PhiSpy\n")
	
	print ("Choose among different training sets for a better phage identification:\n")
	print_list_modified()	
	
	print()
	print ("As stated by PhiSpy developers:")
	print ("This is training data that is used in the prediction of the prophages. If possible, you should use the") 
	print ("closest relative to your genome, however if that is not possible, you can also use the Generic Training set.")
	print ("\n")

######
def help_options():
	print ("\nUSAGE: python %s gbk_file outdir name trainingSet\n"  %os.path.realpath(__file__))
	
	print ("Training Set list:")
	print_list_modified()	


######
def main():
	## control if options provided or help
	if len(sys.argv) != 5:
		help_options()
		exit()
	
	## argv
	gbk_file = os.path.abspath(argv[1])
	outdir = os.path.abspath(argv[2])
	name=argv[3]
	training_set = argv[4]
	
	## call
	print ("\n+ Generate annotation of putative phages for sample %s in folder: %s" %(name, outdir))
	ident_bacteriophage(gbk_file=gbk_file, name=name, output_dir=outdir, training_set_tmp=training_set, Debug=True)
	results_PhiSpy(outdir)
	
	
	
######
'''******************************************'''
if __name__== "__main__":
	main()
